#=
 
This file contains RT elemental-related functions
 
=#
#=
"Elemental single-scattering layer"
function elemental!(pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray,       #{FT2,1}, #Suniti
                            dœÑ_Œª::AbstractArray{FT,1},  # dœÑ_Œª: total optical depth of elemental layer (per Œª)
                            dœÑ::FT,                     # dœÑ:   scattering optical depth of elemental layer (scalar)
                            œñ_Œª::AbstractArray{FT,1},   # œñ_Œª: single scattering albedo of elemental layer (per Œª, absorptions by gases included)
                            œñ::FT,                      # œñ: single scattering albedo of elemental layer (no trace gas absorption included)
                            Z‚Å∫‚Å∫::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫::AbstractArray{FT,2},   # Z matrix
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::Union{AddedLayer{FT},AddedLayerRS{FT}}, 
                            I_static,
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}

    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, iŒº‚ÇÄ = quad_points
    #@unpack œñ_Cabannes = RS_type
    arr_type = array_type(architecture)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    # @show Array(œÑ_sum)[1], Array(dœÑ_Œª)[1], Array(œñ_Œª)[1], Array(Z‚Å∫‚Å∫)[1,1]
    # Later on, we can have Zs also vary with index, pretty easy here:
    # Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Å∫‚Å∫_ = reshape(Z‚Å∫‚Å∫, (size(Z‚Å∫‚Å∫,1), size(Z‚Å∫‚Å∫,2),1))
    # Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = reshape(Z‚Åª‚Å∫, (size(Z‚Å∫‚Å∫,1), size(Z‚Å∫‚Å∫,2),1))

    D = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))
    I‚ÇÄ_NquadN = arr_type(zeros(FT,size(qp_ŒºN,1))); #incident irradiation
    i_end     = pol_type.n*iŒº‚ÇÄ
    I‚ÇÄ_NquadN[iŒº‚ÇÄNstart:i_end] = pol_type.I‚ÇÄ

    device = devi(architecture)

    # If in scattering mode:
    if scatter
   
        NquadN = length(qp_ŒºN)

        # Needs explanation still, different weights: 
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        wct0  = m == 0 ? FT(0.50) * œñ * dœÑ     : FT(0.25) * œñ * dœÑ
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        wct   = m == 0 ? FT(0.50) * œñ * wt_ŒºN  : FT(0.25) * œñ * wt_ŒºN
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4

        # Get the diagonal matrices first
        d_qp  = Diagonal(1 ./ qp_ŒºN)
        d_wct = Diagonal(wct)

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        
        # Version 1: no absorption in batch mode (initiation of a single scattering layer with no or low absorption)
        if false #maximum(dœÑ_Œª) < 0.0001   
            # R‚Åª‚Å∫‚ÇÄ‚ÇÅ(Œª) = M‚Åª¬π(0.5œñ‚Çë(Œª)Z‚Åª‚Å∫C)Œ¥ (See Eqs.7 in Raman paper draft)
            r‚Åª‚Å∫[:,:,:] .= d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ)
            # T‚Å∫‚Å∫‚ÇÄ‚ÇÅ(Œª) = {I-M‚Åª¬π[I - 0.5*œñ‚Çë(Œª)Z‚Å∫‚Å∫C]}Œ¥ (See Eqs.7 in Raman paper draft)
            t‚Å∫‚Å∫[:,:,:] .= I_static - (d_qp * ((I_static - Z‚Å∫‚Å∫ * d_wct) * dœÑ))
            if SFI
                # Reminder: Add equation here what it does
                expk = exp.(-œÑ_sum/qp_Œº[iŒº‚ÇÄ]) #exp(-œÑ(z)/Œº‚ÇÄ)
                # J‚ÇÄ‚Å∫ = 0.5[1+Œ¥(m,0)]M‚Åª¬πœñ‚Çë(Œª)Z‚Å∫‚Å∫œÑI‚ÇÄexp(-œÑ(z)/Œº‚ÇÄ)
                J‚ÇÄ‚Å∫[:,1,:] .= ((d_qp * Z‚Å∫‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
                # J‚ÇÄ‚Åª = 0.5[1+Œ¥(m,0)]M‚Åª¬πœñ‚Çë(Œª)Z‚Åª‚Å∫œÑI‚ÇÄexp(-œÑ(z)/Œº‚ÇÄ)
                J‚ÇÄ‚Åª[:,1,:] .= ((d_qp * Z‚Åª‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
              
            end
        else 
            # Version 2: More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
            # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
            kernel! = get_elem_rt!(device)
            event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ_Œª, dœÑ_Œª, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, 
                qp_ŒºN, wct2, ndrange=size(r‚Åª‚Å∫)); 
            wait(device, event)
            synchronize_if_gpu()

            if SFI
                kernel! = get_elem_rt_SFI!(device)
                event = kernel!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, ndoubl, wct02, pol_type.n, arr_type(pol_type.I‚ÇÄ), iŒº‚ÇÄ, D, ndrange=size(J‚ÇÄ‚Å∫))
                wait(device, event)
                synchronize_if_gpu()
            end
        end

        # Apply D Matrix
        apply_D_matrix_elemental!(ndoubl, pol_type.n, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)

        if SFI
            apply_D_matrix_elemental_SFI!(ndoubl, pol_type.n, J‚ÇÄ‚Åª)
        end      
    else 
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        t‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
    end    
    #@pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end
=#
"Elemental single-scattering layer"
function elemental!(pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray,#{FT2,1}, #Suniti
                            lin_œÑ_sum::AbstractArray, 
                            dœÑ::AbstractArray,
                            lin_dœÑ::AbstractArray,
                            computed_layer_properties::CoreScatteringOpticalProperties,
                            lin_computed_layer_properties::linCoreScatteringOpticalProperties,
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::Union{AddedLayer{FT},AddedLayerRS{FT}}, 
                            lin_added_layer::Union{linAddedLayer{FT},linAddedLayerRS{FT}}
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}

    @unpack r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, j‚ÇÄ‚Å∫, j‚ÇÄ‚Åª = added_layer
    # the following contain core RT derivatives with respect to œÑ, œñ, and Z specific to the current layer and band.
    # Suniti: carry out linearization with respect to the state vector only outside rt_kernel  
    @unpack dr‚Å∫‚Åª, dr‚Åª‚Å∫, dt‚Åª‚Åª, dt‚Å∫‚Å∫, dj‚ÇÄ‚Å∫, dj‚ÇÄ‚Åª = lin_added_layer
    @unpack qp_Œº, iŒº‚ÇÄ, wt_ŒºN, qp_ŒºN = quad_points
    @unpack œÑ, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫ = computed_layer_properties
    #@unpack lin_œÑ, lin_œñ, lin_Z‚Å∫‚Å∫, lin_Z‚Åª‚Å∫ = computed_layer_properties
    
    
    #@show M
    arr_type = array_type(architecture)

    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    I‚ÇÄ    = arr_type(pol_type.I‚ÇÄ)
    D     = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))

    device = devi(architecture)

    # If in scattering mode:
    if scatter
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4
 
        # More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
        # with absorption in batch mode, low tau_scatt but higher tau_total, needs exact equations
        kernel! = get_elem_rt!(device)
        event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, 
                        dr‚Åª‚Å∫, dt‚Å∫‚Å∫, 
                        œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, 
                        #lin_œñ, lin_dœÑ, lin_Z‚Åª‚Å∫, lin_Z‚Å∫‚Å∫, 
                        qp_ŒºN, wct2, ndrange=size(r‚Åª‚Å∫)); 
#        wait(device, event)
        synchronize_if_gpu()

        # SFI part
        kernel! = get_elem_rt_SFI!(device)
        event = kernel!(j‚ÇÄ‚Å∫, j‚ÇÄ‚Åª, 
                        dj‚ÇÄ‚Å∫, dj‚ÇÄ‚Åª, 
                        œñ, dœÑ, arr_type(œÑ_sum), Z‚Åª‚Å∫, Z‚Å∫‚Å∫, 
                        qp_ŒºN, ndoubl, wct02, 
                        pol_type.n, I‚ÇÄ, iŒº‚ÇÄ, D, ndrange=size(j‚ÇÄ‚Å∫))
 #       wait(device, event)
        synchronize_if_gpu()
        
        # Apply D Matrix
        apply_D_matrix_elemental!(ndoubl, pol_type.n, 
                                r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, 
                                dr‚Åª‚Å∫, dt‚Å∫‚Å∫, dr‚Å∫‚Åª, dt‚Åª‚Åª)

        # apply D matrix for SFI
        apply_D_matrix_elemental_SFI!(ndoubl, pol_type.n, j‚ÇÄ‚Åª, , dj‚ÇÄ‚Åª)   
    else
        # Note: œÑ is not defined here
        t‚Å∫‚Å∫ .= Diagonal{exp(-œÑ ./ qp_ŒºN)}
        t‚Åª‚Åª .= t‚Å∫‚Å∫ #Diagonal{exp(-œÑ ./ qp_ŒºN)}
        # Derivativve wrt œÑ
        dt‚Å∫‚Å∫[1,:,:] .= Diagonal{-exp(-œÑ ./ qp_ŒºN)./qp_ŒºN}
        dt‚Åª‚Åª[1,:,:] .= dt‚Å∫‚Å∫
        dt‚Å∫‚Å∫[2:3,:,:] .= 0
        dt‚Åª‚Åª[2:3,:,:] .= 0
    end    
end

@kernel function get_elem_rt!(r‚Åª‚Å∫, t‚Å∫‚Å∫, dr‚Åª‚Å∫, dt‚Å∫‚Å∫, œñ_Œª, dœÑ_Œª, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, wct) 
    n2 = 1
    i, j, n = @index(Global, NTuple) 
    if size(Z‚Åª‚Å∫,3)>1
        n2 = n
    end
    if (wct[j]>1.e-8) 
        tmpM = exp(-dœÑ_Œª[n] * ((1 / Œº[i]) + (1 / Œº[j])))

        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        r‚Åª‚Å∫[i,j,n] = 
            œñ_Œª[n] * Z‚Åª‚Å∫[i,j,n2] * 
            (Œº[j] / (Œº[i] + Œº[j])) * wct[j] * 
            (1 - tmpM)
            
        dr‚Åª‚Å∫[1,i,j,n] = 
            œñ_Œª[n] * Z‚Åª‚Å∫[i,j,n2] * 
            (1 / Œº[i]) * wct[j] * 
            tmpM

        dr‚Åª‚Å∫[2, i,j,n] = 
            Z‚Åª‚Å∫[i,j,n2] * 
            (Œº[j] / (Œº[i] + Œº[j])) * wct[j] * 
            (1 - tmpM)

        dr‚Åª‚Å∫[3, i,j,n] = 
            œñ_Œª[n] *  
            (Œº[j] / (Œº[i] + Œº[j])) * wct[j] * 
            (1 - tmpM)
                    
        if (Œº[i] == Œº[j])
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j
                tmpM = exp(-dœÑ_Œª[n] / Œº[i]) 
                t‚Å∫‚Å∫[i,j,n] = 
                    tmpM *
                    (1 + œñ_Œª[n] * Z‚Å∫‚Å∫[i,i,n2] * (dœÑ_Œª[n] / Œº[i]) * wct[i])
                dt‚Å∫‚Å∫[1,i,j,n] = ( - t‚Å∫‚Å∫[i,j,n] + tmpM * œñ_Œª[n] * Z‚Å∫‚Å∫[i,i,n2] * wct[i]) / Œº[i] 
                dt‚Å∫‚Å∫[2,i,j,n] = (tmpM * Z‚Å∫‚Å∫[i,i,n2] * dœÑ_Œª[n] * wct[i]) / Œº[i] 
                dt‚Å∫‚Å∫[3,i,j,n] = (tmpM * œñ_Œª[n] * dœÑ_Œª[n] * wct[i]) / Œº[i] 
            else
                t‚Å∫‚Å∫[i,j,n] = 0.0
                dt‚Å∫‚Å∫[1:3, i,j,n] = 0.0
            end
        else
    
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            tmpM = (exp(-dœÑ_Œª[n] / Œº[i]) - exp(-dœÑ_Œª[n] / Œº[j])) 
            t‚Å∫‚Å∫[i,j,n] = 
                œñ_Œª[n] * Z‚Å∫‚Å∫[i,j,n2] * 
                #Z‚Å∫‚Å∫[i,j] * 
                (Œº[j] / (Œº[i] - Œº[j])) * wct[j] * 
                tmpM
            dt‚Å∫‚Å∫[1, i,j,n] = 
                -(t‚Å∫‚Å∫[i,j,n]/tmpM) * 
                (exp(-dœÑ_Œª[n] / Œº[i])/ Œº[i] - exp(-dœÑ_Œª[n] / Œº[j])/ Œº[j])
            dt‚Å∫‚Å∫[2, i,j,n] = 
                t‚Å∫‚Å∫[i,j,n]/œñ_Œª[n]
            dt‚Å∫‚Å∫[3, i,j,n] = 
                t‚Å∫‚Å∫[i,j,n]/Z‚Å∫‚Å∫[i,j,n2]
        end
    else
        r‚Åª‚Å∫[i,j,n] = 0.0
        dr‚Åª‚Å∫[1:3,i,j,n] = 0.0
        if i==j
            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ_Œª[n] / Œº[i]) #Suniti
            dt‚Å∫‚Å∫[1,i,j,n] =  -t‚Å∫‚Å∫[i,j,n] / Œº[i]
            dt‚Å∫‚Å∫[2:3,i,j,n] = 0.0
        else
            t‚Å∫‚Å∫[i,j,n] = 0.0
            dt‚Å∫‚Å∫[1:3,i,j,n] = 0.0
        end
    end
    nothing
end

@kernel function get_elem_rt_SFI!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, dJ‚ÇÄ‚Å∫, dJ‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, ndoubl, wct02, nStokes ,I‚ÇÄ, iŒº0, D)
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    
    i, _, n = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    FT = eltype(I‚ÇÄ)
    J‚ÇÄ‚Å∫[i, 1, n]=0
    J‚ÇÄ‚Åª[i, 1, n]=0
    dJ‚ÇÄ‚Å∫[1:3, i, 1, n]=0
    dJ‚ÇÄ‚Åª[1:3, i, 1, n]=0
    n2=1
    if size(Z‚Åª‚Å∫,3)>1
        n2 = n
    end
    
    Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
    Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
    dZ‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
    dZ‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
    
    for ii = i_start:i_end
        Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫[i,ii,n2] * I‚ÇÄ[ii-i_start+1]
        Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫[i,ii,n2] * I‚ÇÄ[ii-i_start+1] 
        if(ii==i)
            dZ‚Å∫‚Å∫_I‚ÇÄ += I‚ÇÄ[ii-i_start+1]
            dZ‚Åª‚Å∫_I‚ÇÄ += I‚ÇÄ[ii-i_start+1]
        end 
    end

    if (i>=i_start) && (i<=i_end)
        ctr = i-i_start+1
        # See Eq. 1.54 in Fell
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
        J‚ÇÄ‚Å∫[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Å∫‚Å∫_I‚ÇÄ 
                * (dœÑ_Œª[n] / Œº[i]) * exp(-dœÑ_Œª[n] / Œº[i])
    
        dJ‚ÇÄ‚Å∫[1, i, 1, n] = (J‚ÇÄ‚Å∫[i, 1, n] / dœÑ_Œª[n]) * (1 - dœÑ_Œª[n] / Œº[i]) 
        dJ‚ÇÄ‚Å∫[2, i, 1, n] = (J‚ÇÄ‚Å∫[i, 1, n] / œñ_Œª[n])
        dJ‚ÇÄ‚Å∫[3, i, 1, n] = (J‚ÇÄ‚Å∫[i, 1, n] /  Z‚Å∫‚Å∫_I‚ÇÄ) * dZ‚Å∫‚Å∫_I‚ÇÄ
    else
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
        # See Eq. 1.53 in Fell
        tmpM = (exp(-dœÑ_Œª[n] / Œº[i]) - exp(-dœÑ_Œª[n] / Œº[i_start]))
        J‚ÇÄ‚Å∫[i, 1, n] = 
            wct02 * œñ_Œª[n] * Z‚Å∫‚Å∫_I‚ÇÄ * 
            (Œº[i_start] / (Œº[i] - Œº[i_start])) * 
            tmpM
        dJ‚ÇÄ‚Å∫[1, i, 1, n] = - (J‚ÇÄ‚Å∫[i, 1, n] / tmpM) * 
            (exp(-dœÑ_Œª[n] / Œº[i])/Œº[i] - exp(-dœÑ_Œª[n] / Œº[i_start])/ Œº[i_start])
        dJ‚ÇÄ‚Å∫[2, i, 1, n] = (J‚ÇÄ‚Å∫[i, 1, n] / œñ_Œª[n])
        dJ‚ÇÄ‚Å∫[3, i, 1, n] = (J‚ÇÄ‚Å∫[i, 1, n] /  Z‚Å∫‚Å∫_I‚ÇÄ) * dZ‚Å∫‚Å∫_I‚ÇÄ
    end
    #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]
    # See Eq. 1.52 in Fell
    tmpM = (1 - exp(-dœÑ_Œª[n] * ((1 / Œº[i]) + (1 / Œº[i_start]))))
    J‚ÇÄ‚Åª[i, 1, n] = wct02 * œñ_Œª[n] * Z‚Åª‚Å∫_I‚ÇÄ * 
        (Œº[i_start] / (Œº[i] + Œº[i_start])) * tmpM
    dJ‚ÇÄ‚Åª[1, i, 1, n] = (J‚ÇÄ‚Åª[i, 1, n] / tmpM) * 
        exp(-dœÑ_Œª[n] * ((1 / Œº[i]) + (1 / Œº[i_start])))
        * ((1 / Œº[i]) + (1 / Œº[i_start]))
    dJ‚ÇÄ‚Åª[2, i, 1, n] = J‚ÇÄ‚Åª[i, 1, n] / œñ_Œª[n] 
    dJ‚ÇÄ‚Åª[3, i, 1, n] = (J‚ÇÄ‚Åª[i, 1, n] / Z‚Åª‚Å∫_I‚ÇÄ) * dZ‚Åª‚Å∫_I‚ÇÄ

    J‚ÇÄ‚Å∫[i, 1, n] *= exp(-œÑ_sum[n]/Œº[i_start]) # how to do this?! Add a fourth derivative to RT kernel elements (only for J terms)
    J‚ÇÄ‚Åª[i, 1, n] *= exp(-œÑ_sum[n]/Œº[i_start]) # 1: wrt œÑ, 2: wrt œñ, 3: wrt Z, 4: wrt œÑ_sum
    J‚ÇÄ‚Å∫[4, i, 1, n] = - J‚ÇÄ‚Å∫[i, 1, n]/Œº[i_start] 
    J‚ÇÄ‚Åª[4, i, 1, n] = - J‚ÇÄ‚Åª[i, 1, n]/Œº[i_start] 
    if ndoubl >= 1
        J‚ÇÄ‚Åª[i, 1, n] = D[i,i]*J‚ÇÄ‚Åª[i, 1, n] #D = Diagonal{1,1,-1,-1,...Nquad times}
        dJ‚ÇÄ‚Åª[1, i, 1, n] = D[i,i]*dJ‚ÇÄ‚Åª[1, i, 1, n]
        dJ‚ÇÄ‚Åª[2, i, 1, n] = D[i,i]*dJ‚ÇÄ‚Åª[2, i, 1, n]
        dJ‚ÇÄ‚Åª[3, i, 1, n] = D[i,i]*dJ‚ÇÄ‚Åª[3, i, 1, n]
        dJ‚ÇÄ‚Åª[4, i, 1, n] = D[i,i]*dJ‚ÇÄ‚Åª[4, i, 1, n]
    end  
    nothing
end

@kernel function apply_D_elemental!(ndoubl, pol_n, 
    r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª,
    dr‚Åª‚Å∫, dt‚Å∫‚Å∫, dr‚Å∫‚Åª, dt‚Åª‚Åª)
    i, j, n = @index(Global, NTuple)

    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            r‚Å∫‚Åª[i,j,n] = r‚Åª‚Å∫[i,j,n]
            t‚Åª‚Åª[i,j,n] = t‚Å∫‚Å∫[i,j,n]
            dr‚Å∫‚Åª[1:4,i,j,n] .= dr‚Åª‚Å∫[1:4,i,j,n]
            dt‚Åª‚Åª[1:4,i,j,n] .= dt‚Å∫‚Å∫[1:4,i,j,n]
        else
            r‚Å∫‚Åª[i,j,n] = -r‚Åª‚Å∫[i,j,n] 
            t‚Åª‚Åª[i,j,n] = -t‚Å∫‚Å∫[i,j,n] 
            dr‚Å∫‚Åª[1:4,i,j,n] = -dr‚Åª‚Å∫[1:4,i,j,n] 
            dt‚Åª‚Åª[1:4,i,j,n] = -dt‚Å∫‚Å∫[1:4,i,j,n] 
        end
    else
        if mod(i, pol_n) > 2
            r‚Åª‚Å∫[i,j,n] = - r‚Åª‚Å∫[i,j,n]
            dr‚Åª‚Å∫[1:4,i,j,n] .= - dr‚Åª‚Å∫[1:4,i,j,n]
        end 
    end
    nothing
end

@kernel function apply_D_elemental_SFI!(ndoubl, pol_n, J‚ÇÄ‚Åª, dJ‚ÇÄ‚Åª)
    i, _, n = @index(Global, NTuple)
    
    if ndoubl>1
        if mod(i, pol_n) > 2
            J‚ÇÄ‚Åª[i, 1, n] = - J‚ÇÄ‚Åª[i, 1, n]
            dJ‚ÇÄ‚Åª[1:4, i, 1, n] .= - dJ‚ÇÄ‚Åª[1:4, i, 1, n]
        end 
    end
    nothing
end

function apply_D_matrix_elemental!(ndoubl::Int, n_stokes::Int, 
    r‚Åª‚Å∫::AbstractArray{FT,3}, 
    t‚Å∫‚Å∫::AbstractArray{FT,3}, 
    r‚Å∫‚Åª::AbstractArray{FT,3}, 
    t‚Åª‚Åª::AbstractArray{FT,3},
    dr‚Åª‚Å∫::AbstractArray{FT,4}, 
    dt‚Å∫‚Å∫::AbstractArray{FT,4}, 
    dr‚Å∫‚Åª::AbstractArray{FT,4}, 
    dt‚Åª‚Åª::AbstractArray{FT,4}
    ) where {FT}
    device = devi(architecture(r‚Åª‚Å∫))
    applyD_kernel! = apply_D_elemental!(device)
    applyD_kernel!(ndoubl,n_stokes, 
        r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, 
        dr‚Åª‚Å∫, dt‚Å∫‚Å∫, dr‚Å∫‚Åª, dt‚Åª‚Åª,
        ndrange=size(r‚Åª‚Å∫));
#    wait(device, event);
    synchronize_if_gpu();
    return nothing
end

function apply_D_matrix_elemental_SFI!(ndoubl::Int, n_stokes::Int, 
        J‚ÇÄ‚Åª::AbstractArray{FT,3},
        dJ‚ÇÄ‚Åª::AbstractArray{FT,4}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(architecture(J‚ÇÄ‚Åª))
        applyD_kernel! = apply_D_elemental_SFI!(device)
        applyD_kernel!(ndoubl,n_stokes, J‚ÇÄ‚Åª, dJ‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
    #    wait(device, event);
        synchronize_if_gpu();
        return nothing
    end
end