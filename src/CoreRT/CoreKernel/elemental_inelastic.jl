#=
 
This file contains RT elemental-related functions
 
=#

"Elemental single-scattering layer for RRS"
function elemental!(pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray,#{FT2,1}, #Suniti
                            dœÑ_Œª::AbstractArray{FT,1},  # dœÑ_Œª: total optical depth of elemental layer (per Œª)
                            dœÑ::FT,                     # dœÑ:   scattering optical depth of elemental layer (scalar)
                            œñ_Œª::AbstractArray{FT,1},   # œñ_Œª: single scattering albedo of elemental layer (per Œª, absorptions by gases included)
                            œñ::FT,                      # œñ: single scattering albedo of elemental layer (no trace gas absorption included)
                                                        # Rayleigh_XS/(Raman_XS+Rayleigh_XS)
                            œñ_Œª‚ÇÄŒª‚ÇÅ::AbstractArray{FT,2},# Raman_XS/(Raman_XS+Rayleigh_XS)
                            Z‚Å∫‚Å∫::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫::AbstractArray{FT,2}, 
                            Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ::AbstractArray{FT,2}, 
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::AddedLayer{FT}, 
                            I_static,
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}

    @unpack ier‚Å∫‚Åª, ier‚Åª‚Å∫, iet‚Åª‚Åª, iet‚Å∫‚Å∫, ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, iŒº‚ÇÄ = quad_points
    arr_type = array_type(architecture)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    
    # Later on, we can have Zs also vary with index, pretty easy here:
    # Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Å∫‚Å∫_ = reshape(Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ, (size(Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ,2),1))
    # Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = reshape(Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ, (size(Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ,2),1))

    D = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))
    I‚ÇÄ_NquadN = arr_type(zeros(FT,size(qp_ŒºN,1))); #incident irradiation
    i_start   = pol_type.n*(iŒº‚ÇÄ-1) + 1 
    i_end     = pol_type.n*iŒº‚ÇÄ
    I‚ÇÄ_NquadN[iŒº‚ÇÄNstart:i_end] = pol_type.I‚ÇÄ

    device = devi(architecture)

    # If in scattering mode:
    if scatter
   
        NquadN = length(qp_ŒºN)

        # Needs explanation still, different weights: 
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        # scalars
        wct0  = m == 0 ? FT(0.50) * œñ * dœÑ     : FT(0.25) * œñ * dœÑ 
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        # vectors
        wct   = m == 0 ? FT(0.50) * œñ * wt_ŒºN  : FT(0.25) * œñ * wt_ŒºN
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4

        # Get the diagonal matrices first
        d_qp  = Diagonal(1 ./ qp_ŒºN)
        d_wct = Diagonal(wct)

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        
        # Version 1: no absorption in batch mode (initiation of a single scattering layer with no or low absorption)
        if false #maximum(dœÑ_Œª) < 0.0001   
            # R‚Åª‚Å∫‚ÇÄ‚ÇÅ(Œª) = M‚Åª¬π(0.5œñ‚Çë(Œª)Z‚Åª‚Å∫C)Œ¥ (See Eqs.7 in Raman paper draft)
            r‚Åª‚Å∫[:,:,:] .= d_qp * Z‚Åª‚Å∫ * (d_wct * dœÑ)
            # T‚Å∫‚Å∫‚ÇÄ‚ÇÅ(Œª) = {I-M‚Åª¬π[I - 0.5*œñ‚Çë(Œª)Z‚Å∫‚Å∫C]}Œ¥ (See Eqs.7 in Raman paper draft)
            t‚Å∫‚Å∫[:,:,:] .= I_static - (d_qp * ((I_static - Z‚Å∫‚Å∫ * d_wct) * dœÑ))
            if SFI
                # Reminder: Add equation here what it does
                expk = exp.(-œÑ_sum/qp_Œº[iŒº‚ÇÄ]) #exp(-œÑ(z)/Œº‚ÇÄ)
                # J‚ÇÄ‚Å∫ = 0.5[1+Œ¥(m,0)]M‚Åª¬πœñ‚Çë(Œª)Z‚Å∫‚Å∫œÑI‚ÇÄexp(-œÑ(z)/Œº‚ÇÄ)
                J‚ÇÄ‚Å∫[:,1,:] .= ((d_qp * Z‚Å∫‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
                # J‚ÇÄ‚Åª = 0.5[1+Œ¥(m,0)]M‚Åª¬πœñ‚Çë(Œª)Z‚Åª‚Å∫œÑI‚ÇÄexp(-œÑ(z)/Œº‚ÇÄ)
                J‚ÇÄ‚Åª[:,1,:] .= ((d_qp * Z‚Åª‚Å∫ * I‚ÇÄ_NquadN) * wct0) .* expk'
              
            end
        else 
            #Version 2: More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
            # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
            kernel! = get_elem_rt!(device)
            event = kernel!(ier‚Åª‚Å∫, iet‚Å∫‚Å∫, œñ_Œª, œñ_Œª‚ÇÄŒª‚ÇÅ, dœÑ_Œª, Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ, Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ, qp_ŒºN, wct2, ndrange=size(ier‚Åª‚Å∫)); 
            wait(device, event)
            synchronize_if_gpu()

            if SFI
                kernel! = get_elem_rt_SFI!(device)
                event = kernel!(ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, œñ_Œª, œñ_Œª‚ÇÄŒª‚ÇÅ, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ, Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ, qp_ŒºN, ndoubl, wct02, pol_type.n, arr_type(pol_type.I‚ÇÄ), iŒº‚ÇÄ, D, ndrange=size(J‚ÇÄ‚Å∫))
                wait(device, event)
            end
            #ii = pol_type.n*(iŒº0-1)+1
            #@show 'B',iŒº0,  r‚Åª‚Å∫[1,ii,1]/(J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0]), r‚Åª‚Å∫[1,ii,1], J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0], J‚ÇÄ‚Å∫[1,1,1]*wt_Œº[iŒº0]
            synchronize_if_gpu()
        end
        # Apply D Matrix
        apply_D_matrix_elemental!(ndoubl, pol_type.n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)

        if SFI
            apply_D_matrix_elemental_SFI!(ndoubl, pol_type.n, ieJ‚ÇÄ‚Åª)
        end      
    else 
        # Note: œÑ is not defined here
        iet‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        iet‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
    end    
    #@pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end

@kernel function get_elem_rt!(ier‚Åª‚Å∫, iet‚Å∫‚Å∫, œñ_Œª, œñ_Œª‚ÇÄŒª‚ÇÅ, dœÑ‚ÇÄ, dœÑ‚ÇÅ, dœÑ_Œª, Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ, Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ, qp_ŒºN, wct2)
    i, j, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple) 
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    if (wct2[j]>1.e-8) 
        # dœÑ‚ÇÄ, dœÑ‚ÇÅ are the purely scattering (elastic+inelastic) molecular elemental 
        # optical thicknesses at wavelengths Œª‚ÇÄ and Œª‚ÇÅ
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = œñ_Œª‚ÇÄŒª‚ÇÅ[n‚ÇÅ,n‚ÇÄ] * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,j] * (qp_ŒºN[j]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ + qp_ŒºN[j]*dœÑ‚ÇÅ)) * (1 - exp(-((dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])))) * (wct2[j]) 
                    
        if (qp_ŒºN[i] == qp_ŒºN[j])
            # @show i,j
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j       
                if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = ((exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ_Œª[n‚ÇÄ])) * œñ_Œª‚ÇÄŒª‚ÇÅ[n‚ÇÅ,n‚ÇÄ] * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,i] * wct2[i]
                else    
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = œñ_Œª‚ÇÄŒª‚ÇÅ[n‚ÇÅ,n‚ÇÄ] * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,i] * wct2[i] * exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])/ qp_ŒºN[j]
                end
            else
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = 0.0
            end
        else
            #@show  qp_ŒºN[i], qp_ŒºN[j]  
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = œñ_Œª‚ÇÄŒª‚ÇÅ[n‚ÇÅ,n‚ÇÄ] * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,j] * (qp_ŒºN[j]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ - qp_ŒºN[j]*dœÑ‚ÇÅ)) * (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])) * wct2[j]
        end
    else
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = 0.0
        if i==j
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = 0.0
        else
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,n‚ÇÄ] = 0.0
        end
    end
end

#  TODO: Nov 30, 2021
@kernel function get_elem_rt_SFI!(J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª, œñ_Œª, dœÑ_Œª, œÑ_sum, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, qp_ŒºN, ndoubl, wct02, nStokes ,I‚ÇÄ, iŒº0, D)
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    
    i, _, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    FT = eltype(I‚ÇÄ)
    J‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, n‚ÇÄ]=0
    J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ]=0

    
    Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
    Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
    for ii = i_start:i_end
        Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,ii] * I‚ÇÄ[ii-i_start+1]
        Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫_Œª‚ÇÄŒª‚ÇÅ[i,ii] * I‚ÇÄ[ii-i_start+1] 
    end
    
    if (i>=i_start) && (i<=i_end)
        #ctr = i-i_start+1
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
        if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
            J‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, n‚ÇÄ] = ((exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ_Œª[n‚ÇÄ])) * œñ_Œª‚ÇÄŒª‚ÇÅ[n‚ÇÅ,n‚ÇÄ] * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_I‚ÇÄ * wct02
        else
            J‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, n‚ÇÄ] = wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ, n‚ÇÄ] * Z‚Å∫‚Å∫_I‚ÇÄ * (dœÑ‚ÇÄ[n] / qp_ŒºN[j]) * exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])
        end
    else
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
        J‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, n‚ÇÄ] = wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ, n‚ÇÄ] * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Å∫‚Å∫_I‚ÇÄ * (qp_ŒºN[i_start]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ - qp_ŒºN[i_start]*dœÑ‚ÇÅ)) * (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]))
    end
    #TODO
    #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]                    
    J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] = wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ, n‚ÇÄ] * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Åª‚Å∫_I‚ÇÄ * (qp_ŒºN[i_start]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ + qp_ŒºN[i_start]*dœÑ‚ÇÅ)) * (1 - exp(-( (dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]) )))

    J‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, n‚ÇÄ] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])
    J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])

    if ndoubl >= 1
        J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] = D[i,i]*J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] #D = Diagonal{1,1,-1,-1,...Nquad times}
    end        
end

@kernel function apply_D_elemental!(ndoubl, pol_n, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª)
    i, j, n = @index(Global, NTuple)

    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            r‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = r‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
            t‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = t‚Å∫‚Å∫[i, j ,n‚ÇÅ, n‚ÇÄ]
        else
            r‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -r‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
            t‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -t‚Å∫‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
        end
    else
        if mod(i, pol_n) > 2
            r‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] = - r‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end

@kernel function apply_D_elemental_SFI!(ndoubl, pol_n, J‚ÇÄ‚Åª)
    i, _, n = @index(Global, NTuple)
    
    if ndoubl>1
        if mod(i, pol_n) > 2
            J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] = - J‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end

function apply_D_matrix_elemental!(ndoubl::Int, n_stokes::Int, r‚Åª‚Å∫::CuArray{FT,3}, t‚Å∫‚Å∫::CuArray{FT,3}, r‚Å∫‚Åª::CuArray{FT,3}, t‚Åª‚Åª::CuArray{FT,3}) where {FT}
    device = devi(Architectures.GPU())
    applyD_kernel! = apply_D_elemental!(device)
    event = applyD_kernel!(ndoubl,n_stokes, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, ndrange=size(r‚Åª‚Å∫));
    wait(device, event);
    synchronize_if_gpu();
    return nothing
end

function apply_D_matrix_elemental!(ndoubl::Int, n_stokes::Int, r‚Åª‚Å∫::Array{FT,3}, t‚Å∫‚Å∫::Array{FT,3}, r‚Å∫‚Åª::Array{FT,3}, t‚Åª‚Åª::Array{FT,3}) where {FT}
    device = devi(Architectures.CPU())
    applyD_kernel! = apply_D_elemental!(device)
    event = applyD_kernel!(ndoubl,n_stokes, r‚Åª‚Å∫, t‚Å∫‚Å∫, r‚Å∫‚Åª, t‚Åª‚Åª, ndrange=size(r‚Åª‚Å∫));
    wait(device, event);
    return nothing
end

function apply_D_matrix_elemental_SFI!(ndoubl::Int, n_stokes::Int, J‚ÇÄ‚Åª::CuArray{FT,3}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(Architectures.GPU())
        applyD_kernel! = apply_D_elemental_SFI!(device)
        event = applyD_kernel!(ndoubl,n_stokes, J‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
        wait(device, event);
        synchronize();
        return nothing
    end
end
    
function apply_D_matrix_elemental_SFI!(ndoubl::Int, n_stokes::Int, J‚ÇÄ‚Åª::Array{FT,3}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(Architectures.CPU())
        applyD_kernel! = apply_D_elemental_SFI!(device)
        event = applyD_kernel!(ndoubl,n_stokes, J‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
        wait(device, event);
        return nothing
    end
end
