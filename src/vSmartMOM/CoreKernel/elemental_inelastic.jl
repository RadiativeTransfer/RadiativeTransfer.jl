#=
 
This file contains RT elemental-related functions
 
=#
function getKernelDim(RS_type::RRS,ier‚Åª‚Å∫)
    return size(ier‚Åª‚Å∫);
end

function getKernelDim(RS_type::Union{VS_0to1, VS_1to0},ier‚Åª‚Å∫)
    return (size(ier‚Åª‚Å∫,1),size(ier‚Åª‚Å∫,2), size(RS_type.i_Œª‚ÇÅŒª‚ÇÄ));
end

function getKernelDimSFI(RS_type::RRS,ieJ‚ÇÄ‚Åª)
    return size(ieJ‚ÇÄ‚Åª);
end

function getKernelDimSFI(RS_type::Union{VS_0to1, VS_1to0},ieJ‚ÇÄ‚Åª)
    return (size(ieJ‚ÇÄ‚Åª,1),size(ieJ‚ÇÄ‚Åª,2), size(RS_type.i_Œª‚ÇÅŒª‚ÇÄ));
end

"Elemental single-scattering layer for RRS"
function elemental_inelastic!(RS_type,
                            pol_type, SFI::Bool, 
                            œÑ_sum::AbstractArray{FT,1},
                            dœÑ_Œª::AbstractArray{FT,1},  # dœÑ_Œª: total optical depth of elemental layer (per Œª)
                            dœÑ::FT,                     # dœÑ:   scattering optical depth of elemental layer (scalar)
                            Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ::AbstractArray{FT,2},   # Z matrix
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ::AbstractArray{FT,2}, 
                            m::Int,                     # m: fourier moment
                            ndoubl::Int,                # ndoubl: number of doubling computations needed 
                            scatter::Bool,              # scatter: flag indicating scattering
                            quad_points::QuadPoints{FT2}, # struct with quadrature points, weights, 
                            added_layer::Union{AddedLayer{FT},AddedLayerRS{FT}}, 
                            I_static,
                            architecture) where {FT<:Union{AbstractFloat, ForwardDiff.Dual},FT2}

    @unpack ier‚Å∫‚Åª, ier‚Åª‚Å∫, iet‚Åª‚Åª, iet‚Å∫‚Å∫, ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª = added_layer
    @unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, iŒº‚ÇÄ = quad_points
    arr_type = array_type(architecture)
    # Need to check with paper nomenclature. This is basically eqs. 19-20 in vSmartMOM
    
    # Later on, we can have Zs also vary with index, pretty easy here:
    # Z‚Å∫‚Å∫_ = repeat(Z‚Å∫‚Å∫, 1, 1, 1)
    Z‚Å∫‚Å∫_ = reshape(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, (size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,2),1))
    # Z‚Åª‚Å∫_ = repeat(Z‚Åª‚Å∫, 1, 1, 1)
    Z‚Åª‚Å∫_ = reshape(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, (size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,1), size(Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ,2),1))

    D = Diagonal(arr_type(repeat(pol_type.D, size(qp_Œº,1))))
    I‚ÇÄ_NquadN = arr_type(zeros(FT,size(qp_ŒºN,1))); #incident irradiation
    i_start   = pol_type.n*(iŒº‚ÇÄ-1) + 1 
    i_end     = pol_type.n*iŒº‚ÇÄ
    I‚ÇÄ_NquadN[iŒº‚ÇÄNstart:i_end] = pol_type.I‚ÇÄ

    device = devi(architecture)

    # If in scattering mode:
    if scatter
   
        NquadN = length(qp_ŒºN)

        # Needs explanation still, different weights: 
        # for m==0, ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.5, while
        # for m>0,  ‚ÇÄ‚à´¬≤·µñ‚Å± cos¬≤(mœï)dœï/4œÄ = 0.25  
        # scalars
        #wct0  = m == 0 ? FT(0.50) * œñ * dœÑ     : FT(0.25) * œñ * dœÑ 
        wct02 = m == 0 ? FT(0.50)              : FT(0.25)
        # vectors
        #wct   = m == 0 ? FT(0.50) * œñ * wt_ŒºN  : FT(0.25) * œñ * wt_ŒºN
        wct2  = m == 0 ? wt_ŒºN/2               : wt_ŒºN/4

        # Get the diagonal matrices first
        #d_qp  = Diagonal(1 ./ qp_ŒºN)
        #d_wct = Diagonal(wct2)

        # Calculate r‚Åª‚Å∫ and t‚Å∫‚Å∫
        #Version 2: More computationally intensive definition of a single scattering layer with variable (0-‚àû) absorption
        # Version 2: with absorption in batch mode, low tau_scatt but higher tau_total, needs different equations
        
        kernel! = get_elem_rt!(device)
        @show getKernelDim(RS_type,ier‚Åª‚Å∫)
        @show size(qp_ŒºN), size(dœÑ_Œª), size(Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ)
        @unpack œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref = RS_type
        @show size(œñ_Œª‚ÇÅŒª‚ÇÄ), size(i_Œª‚ÇÅŒª‚ÇÄ), size(i_ref)
        event = kernel!(RS_type, 
                        ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                        dœÑ, dœÑ_Œª, 
                        Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                        qp_ŒºN, wct2, 
                        ndrange=getKernelDim(RS_type,ier‚Åª‚Å∫)); 

        wait(device, event)
        synchronize_if_gpu()

        if SFI
            kernel! = get_elem_rt_SFI!(device)
            event = kernel!(RS_type, 
                            ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                            œÑ_sum, dœÑ, dœÑ_Œª, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, ndoubl,wct02, 
                            pol_type.n, 
                            arr_type(pol_type.I‚ÇÄ), 
                            iŒº‚ÇÄ, D, 
                            ndrange=getKernelDimSFI(RS_type,ieJ‚ÇÄ‚Åª));
            wait(device, event)
        end
            #ii = pol_type.n*(iŒº0-1)+1
            #@show 'B',iŒº0,  r‚Åª‚Å∫[1,ii,1]/(J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0]), r‚Åª‚Å∫[1,ii,1], J‚ÇÄ‚Åª[1,1,1]*wt_Œº[iŒº0], J‚ÇÄ‚Å∫[1,1,1]*wt_Œº[iŒº0]
            synchronize_if_gpu()

        # Apply D Matrix
        apply_D_matrix_elemental!(RS_type, ndoubl, pol_type.n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)

        if SFI
            apply_D_matrix_elemental_SFI!(RS_type, ndoubl, pol_type.n, ieJ‚ÇÄ‚Åª)
        end      
    else 
        # Note: œÑ is not defined here
        iet‚Å∫‚Å∫[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
        iet‚Åª‚Åª[:] = Diagonal{exp(-œÑ ./ qp_ŒºN)}
    end    
    #@pack! added_layer = r‚Å∫‚Åª, r‚Åª‚Å∫, t‚Åª‚Åª, t‚Å∫‚Å∫, J‚ÇÄ‚Å∫, J‚ÇÄ‚Åª   
end
#Suniti: is there a way to pass information like œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref, etc. along with RS_type? So that they can be retrieved as RSS.œñ_Œª‚ÇÅŒª‚ÇÄ for example?
@kernel function get_elem_rt!(RS_type::RRS, 
                            ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                            dœÑ, dœÑ_Œª, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, wct2)

    i, j, n‚ÇÅ, Œîn = @index(Global, NTuple)
    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref = RS_type
    nMax = length(dœÑ_Œª) 
    # n‚ÇÅ covers the full range of wavelengths, while n‚ÇÄ = n‚ÇÅ+Œîn only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    n‚ÇÄ  = n‚ÇÅ + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    i_œñ = i_ref + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    #@show   n‚ÇÄ , i_œñ 
    if (wct2[j]>1.e-8) & (1 ‚â§ n‚ÇÄ ‚â§ nMax)

        # dœÑ‚ÇÄ, dœÑ‚ÇÅ are the purely scattering (elastic+inelastic) molecular elemental 
        # optical thicknesses at wavelengths Œª‚ÇÄ and Œª‚ÇÅ
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,Œîn] = fscattRayl * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
            (qp_ŒºN[j] / (qp_ŒºN[i] + qp_ŒºN[j])) * 
            (1 - exp(-((dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])))) * wct2[j] 
                    
        if (qp_ŒºN[i] == qp_ŒºN[j])
            # @show i,j
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j       
                if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * dœÑ * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                        ((exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ_Œª[n‚ÇÄ])) 
                        
                else    
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * dœÑ * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] *
                        exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j])/ qp_ŒºN[j]
                end
            else
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
            end
        else
            #@show  qp_ŒºN[i], qp_ŒºN[j]  
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 
                œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                (qp_ŒºN[j] / (qp_ŒºN[i] - qp_ŒºN[j])) * wct2[j] * 
                (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[j]))
        end
    else
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        if i==j
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        else
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,Œîn] = 0.0
        end
    end
end

@kernel function get_elem_rt!(RS_type::Union{VS_0to1, VS_1to0}, 
                            ier‚Åª‚Å∫, iet‚Å∫‚Å∫, 
                            dœÑ‚ÇÅ, dœÑ_Œª, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, wct2)
    i, j, Œîn = @index(Global, NTuple) 
    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, dœÑ‚ÇÄ, dœÑ‚ÇÄ_Œª = RS_type 
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]  
    if (wct2[j]>1.e-8) 

        # dœÑ‚ÇÄ, dœÑ‚ÇÅ are the purely scattering (elastic+inelastic) molecular elemental 
        # optical thicknesses at wavelengths Œª‚ÇÄ and Œª‚ÇÅ
        # ùêë‚Åª‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Åª‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢+Œº‚±º)) Ãá(1 - exp{-œÑ Ãá(1/Œº·µ¢ + 1/Œº‚±º)}) Ãáùë§‚±º
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,1] = 
                œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                (qp_ŒºN[j]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ + qp_ŒºN[j]*dœÑ‚ÇÅ)) * wct2[j] * 
                (1 - exp(-((dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ‚ÇÄ_Œª / qp_ŒºN[j])))) 
                    
        if (qp_ŒºN[i] == qp_ŒºN[j])
            # @show i,j
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
            if i == j       
                if abs(dœÑ‚ÇÄ_Œª-dœÑ_Œª[n‚ÇÅ])>1.e-6
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                            ((exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ‚ÇÄ_Œª)) * 
                            œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i]
                else    
                    iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                            œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,i] * wct2[i] * 
                            exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[j])/ qp_ŒºN[j]
                end
            else
                iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
            end
        else
            #@show  qp_ŒºN[i], qp_ŒºN[j]  
            # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
            # (ùëñ ‚â† ùëó)
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 
                    œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,j] * 
                    (qp_ŒºN[j]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ - qp_ŒºN[j]*dœÑ‚ÇÅ)) * wct2[j] * 
                    (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[j]))
        end
    else
        ier‚Åª‚Å∫[i,j,n‚ÇÅ,1] = 0.0
        if i==j
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
        else
            iet‚Å∫‚Å∫[i,j,n‚ÇÅ,1] = 0.0
        end
    end
end

#  TODO: Nov 30, 2021
@kernel function get_elem_rt_SFI!(RS_type::Union{VS_0to1, VS_1to0}, 
                            ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
                            œÑ_sum, dœÑ‚ÇÅ, dœÑ_Œª, 
                            Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
                            qp_ŒºN, ndoubl,wct02, 
                            nStokes, I‚ÇÄ, iŒº0,D)
    
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, dœÑ‚ÇÄ, dœÑ‚ÇÄ_Œª = RS_type 

    i, _, Œîn = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    n‚ÇÅ =  i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
      
    #if (wct2[j]>1.e-8) 
    
        FT = eltype(I‚ÇÄ)
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1]=0
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1]=0
    
        Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
        Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
        for ii = i_start:i_end
            Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1]
            Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1] 
        end
    
    if (i>=i_start) && (i<=i_end)
        #ctr = i-i_start+1
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
        if abs(dœÑ‚ÇÄ_Œª-dœÑ_Œª[n‚ÇÅ])>1.e-6
            ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
                    ((exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ‚ÇÄ_Œª)) * 
                    œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * dœÑ‚ÇÄ * Z‚Å∫‚Å∫_I‚ÇÄ * wct02
        else
            ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
                    wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * 
                    (dœÑ‚ÇÄ / qp_ŒºN[j]) * exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[j])
        end
    else
        # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] = 
            wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Å∫‚Å∫_I‚ÇÄ * 
            (qp_ŒºN[i_start]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ - qp_ŒºN[i_start]*dœÑ‚ÇÅ)) * 
            (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ‚ÇÄ_Œª / qp_ŒºN[i_start]))
    end
    #TODO
    #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]                    
    ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = 
            wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[n‚ÇÅ] * fscattRayl * (dœÑ‚ÇÄ/dœÑ‚ÇÅ) * Z‚Åª‚Å∫_I‚ÇÄ * 
            (qp_ŒºN[i_start]*dœÑ‚ÇÅ / (qp_ŒºN[i]*dœÑ‚ÇÄ + qp_ŒºN[i_start]*dœÑ‚ÇÅ)) * 
            (1 - exp(-( (dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ‚ÇÄ_Œª / qp_ŒºN[i_start]) )))

    ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, 1] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])
    ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] *= exp(-œÑ_sum[n]/qp_ŒºN[i_start])

    if ndoubl >= 1
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = D[i,i]*ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] #D = Diagonal{1,1,-1,-1,...Nquad times}
    end        
end

#  TODO: Nov 30, 2021
@kernel function get_elem_rt_SFI!(RS_type::RRS, 
    ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, 
    œÑ_sum, dœÑ, dœÑ_Œª, 
    Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, 
    qp_ŒºN, ndoubl,
    wct02, nStokes,
    I‚ÇÄ, iŒº0,D)

    @unpack fscattRayl, œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, i_ref = RS_type 
    
    i_start  = nStokes*(iŒº0-1) + 1 
    i_end    = nStokes*iŒº0
    nMax = length(dœÑ_Œª)
    i, _, n‚ÇÅ, Œîn = @index(Global, NTuple) ##Suniti: What are Global and Ntuple?
    # let n‚ÇÅ cover the full range of wavelengths, while n‚ÇÄ only includes wavelengths at intervals 
    # that contribute significantly enough to inelastic scattering, so that n‚ÇÄ‚â™n‚ÇÅ 
    n‚ÇÄ  = n‚ÇÅ + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    i_œñ = i_ref + i_Œª‚ÇÅŒª‚ÇÄ[Œîn]     
    FT = eltype(I‚ÇÄ)
    if (1 ‚â§ n‚ÇÄ ‚â§ nMax)
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn]=0
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn]=0    
        Z‚Å∫‚Å∫_I‚ÇÄ = FT(0.0);
        Z‚Åª‚Å∫_I‚ÇÄ = FT(0.0);
        for ii = i_start:i_end
            Z‚Å∫‚Å∫_I‚ÇÄ += Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1]
            Z‚Åª‚Å∫_I‚ÇÄ += Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ[i,ii] * I‚ÇÄ[ii-i_start+1] 
        end  
        if (i_start ‚â§ i ‚â§ i_end)
            #ctr = i-i_start+1
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * (dœÑ(Œª)/Œº‚ÇÄ) * exp(-dœÑ(Œª)/Œº‚ÇÄ)
            if abs(dœÑ_Œª[n‚ÇÄ]-dœÑ_Œª[n‚ÇÅ])>1.e-6
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                        ((exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]))/(dœÑ_Œª[n‚ÇÅ]-dœÑ_Œª[n‚ÇÄ])) * 
                        œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * dœÑ * Z‚Å∫‚Å∫_I‚ÇÄ * wct02
            else
                ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                        wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * 
                        (dœÑ / qp_ŒºN[i_start]) * exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start])
            end
        else
            # J‚ÇÄ‚Å∫ = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Å∫‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ - Œº‚ÇÄ)] * [exp(-dœÑ(Œª)/Œº·µ¢) - exp(-dœÑ(Œª)/Œº‚ÇÄ)]
            ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] = 
                    wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * Z‚Å∫‚Å∫_I‚ÇÄ * 
                    (qp_ŒºN[i_start] / (qp_ŒºN[i] - qp_ŒºN[i_start])) * 
                    (exp(-dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) - exp(-dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]))
        end
        #TODO
        #J‚ÇÄ‚Åª = 0.25*(1+Œ¥(m,0)) * œñ(Œª) * Z‚Åª‚Å∫ * I‚ÇÄ * [Œº‚ÇÄ / (Œº·µ¢ + Œº‚ÇÄ)] * [1 - exp{-dœÑ(Œª)(1/Œº·µ¢ + 1/Œº‚ÇÄ)}]                    
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] = wct02 * œñ_Œª‚ÇÅŒª‚ÇÄ[Œîn] * fscattRayl * Z‚Åª‚Å∫_I‚ÇÄ * 
                (qp_ŒºN[i_start] / (qp_ŒºN[i] + qp_ŒºN[i_start])) * 
                (1 - exp(-( (dœÑ_Œª[n‚ÇÅ] / qp_ŒºN[i]) + (dœÑ_Œª[n‚ÇÄ] / qp_ŒºN[i_start]) )))  
        ieJ‚ÇÄ‚Å∫[i, 1, n‚ÇÅ, Œîn] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start]) #correct this to include n‚ÇÄap
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] *= exp(-œÑ_sum[n‚ÇÄ]/qp_ŒºN[i_start]) 
    end
    if ndoubl >= 1 #double check to make sure this isnt repeated using apply_D
        ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] = D[i,i] * ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, Œîn] #D = Diagonal{1,1,-1,-1,...Nquad times}
    end           
end

@kernel function apply_D_elemental!(RS_type::RRS, ndoubl, pol_n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)
    i, j, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple)

    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
            iet‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = iet‚Å∫‚Å∫[i, j ,n‚ÇÅ, n‚ÇÄ]
        else
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
            iet‚Åª‚Åª[i, j, n‚ÇÅ, n‚ÇÄ] = -iet‚Å∫‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] 
        end
    else
        if mod(i, pol_n) > 2
            ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ] = - ier‚Åª‚Å∫[i, j, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end

@kernel function apply_D_elemental_SFI!(RS_type::RRS, ndoubl, pol_n, ieJ‚ÇÄ‚Åª)
    i, _, n‚ÇÅ, n‚ÇÄ = @index(Global, NTuple)
    
    if ndoubl>1
        if mod(i, pol_n) > 2
            ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ] = - ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, n‚ÇÄ]
        end 
    end
end

@kernel function apply_D_elemental!(RS_type::Union{VS_0to1, VS_1to0}, 
                        ndoubl, pol_n, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª)

    i, j, Œîn = @index(Global, NTuple)
    @unpack i_Œª‚ÇÅŒª‚ÇÄ = RS_type
    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    if ndoubl < 1
        ii = mod(i, pol_n) 
        jj = mod(j, pol_n) 
        if ((ii <= 2) & (jj <= 2)) | ((ii > 2) & (jj > 2)) 
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, 1] = ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1]
            iet‚Åª‚Åª[i, j, n‚ÇÅ, 1] = iet‚Å∫‚Å∫[i, j ,n‚ÇÅ, 1]
        else
            ier‚Å∫‚Åª[i, j, n‚ÇÅ, 1] = -ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1] 
            iet‚Åª‚Åª[i, j, n‚ÇÅ, 1] = -iet‚Å∫‚Å∫[i, j, n‚ÇÅ, 1] 
        end
    else
        if mod(i, pol_n) > 2
            ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1] = - ier‚Åª‚Å∫[i, j, n‚ÇÅ, 1]
        end 
    end
end

@kernel function apply_D_elemental_SFI!(RS_type::Union{VS_0to1, VS_1to0}, 
                        ndoubl, pol_n, ieJ‚ÇÄ‚Åª)
    i, _, Œîn = @index(Global, NTuple)
    @unpack i_Œª‚ÇÅŒª‚ÇÄ = RS_type
    
    n‚ÇÅ = i_Œª‚ÇÅŒª‚ÇÄ[Œîn]
    if ndoubl>1
        if mod(i, pol_n) > 2
            ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1] = - ieJ‚ÇÄ‚Åª[i, 1, n‚ÇÅ, 1]
        end 
    end
end

function apply_D_matrix_elemental!(RS_type::RRS, ndoubl::Int, n_stokes::Int, 
                                    ier‚Åª‚Å∫::CuArray{FT,4}, 
                                    iet‚Å∫‚Å∫::CuArray{FT,4}, 
                                    ier‚Å∫‚Åª::CuArray{FT,4}, 
                                    iet‚Åª‚Åª::CuArray{FT,4}) where {FT}
    device = devi(Architectures.GPU())
    applyD_kernel! = apply_D_elemental!(device)
    event = applyD_kernel!(RS_type, ndoubl,n_stokes, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª, ndrange=size(ier‚Åª‚Å∫));
    wait(device, event);
    synchronize_if_gpu();
    return nothing
end

function apply_D_matrix_elemental!(RS_type::RRS, ndoubl::Int, n_stokes::Int, 
                                    ier‚Åª‚Å∫::Array{FT,4}, 
                                    iet‚Å∫‚Å∫::Array{FT,4}, 
                                    ier‚Å∫‚Åª::Array{FT,4}, 
                                    iet‚Åª‚Åª::Array{FT,4}) where {FT}
    device = devi(Architectures.CPU())
    applyD_kernel! = apply_D_elemental!(device)
    event = applyD_kernel!(RS_type, ndoubl,n_stokes, ier‚Åª‚Å∫, iet‚Å∫‚Å∫, ier‚Å∫‚Åª, iet‚Åª‚Åª, ndrange=size(ier‚Åª‚Å∫));
    wait(device, event);
    return nothing
end

function apply_D_matrix_elemental_SFI!(RS_type::RRS,ndoubl::Int, n_stokes::Int, J‚ÇÄ‚Åª::CuArray{FT,4}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(Architectures.GPU())
        applyD_kernel! = apply_D_elemental_SFI!(device)
        event = applyD_kernel!(RS_type::RRS,ndoubl,n_stokes, J‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
        wait(device, event);
        synchronize();
        return nothing
    end
end
    
function apply_D_matrix_elemental_SFI!(RS_type::RRS,ndoubl::Int, n_stokes::Int, J‚ÇÄ‚Åª::Array{FT,4}) where {FT}
    if ndoubl > 1
        return nothing
    else 
        device = devi(Architectures.CPU())
        applyD_kernel! = apply_D_elemental_SFI!(device)
        event = applyD_kernel!(RS_type::RRS,ndoubl,n_stokes, J‚ÇÄ‚Åª, ndrange=size(J‚ÇÄ‚Åª));
        wait(device, event);
        return nothing
    end
end