function constructCoreOpticalProperties(RS_type, iBand, m, model)
    @unpack œÑ_rayl, œÑ_aer, œÑ_abs, aerosol_optics, greek_rayleigh,  = model
    @assert all(iBand .‚â§ length(œÑ_rayl)) "iBand exceeded number of bands"
    
    pol_type = model.params.polarization_type
    # Do this in CPU space only first:
    arr_type = Array
    # Quadrature points:
    Œº = Array(model.quad_points.qp_Œº )
    # Number of Aerosols:
    nAero = size(œÑ_aer[iBand[1]],1)
    nZ    = length(œÑ_rayl[1][:])
    # Rayleigh Z matrix:
    Raylùêô‚Å∫‚Å∫, Raylùêô‚Åª‚Å∫ = Scattering.compute_Z_moments(pol_type, Œº, greek_rayleigh, m, arr_type = arr_type);

    band_layer_props    = [];
    band_fScattRayleigh = [];
    
    for iB in iBand
        # Create Rayleight Core properties per layer
        rayl = CoreScatteringOpticalProperties.(œÑ_rayl[iB][:], [RS_type.œñ_Cabannes], [Raylùêô‚Å∫‚Å∫], [Raylùêô‚Åª‚Å∫])
        
        # Initiate combined properties with rayleigh
        combo = rayl

        # Loop over all aerosol types:
        for i=1:nAero
            # Precomute Z matrices per type (constant per layer)
            @show iB,i
            AerZ‚Å∫‚Å∫, AerZ‚Åª‚Å∫ = Scattering.compute_Z_moments(pol_type, Œº, aerosol_optics[iB][i].greek_coefs, m, arr_type=arr_type)
            # Generate Core optical properties for Aerosols i
            aer   = createAero.(œÑ_aer[iB][i,:], [aerosol_optics[iB][i]], [AerZ‚Å∫‚Å∫], [AerZ‚Åª‚Å∫])
            # Mix with previous Core Optical Properties
            combo = combo .+ aer
        end

        # Somewhere here we can add canopy later as well!
        ###

        # fScattRayleigh:
        #@show rayl[1].œÑ * rayl[1].œñ, combo[1].œÑ
        # Assume œñ of 1 for Rayleight here:
        fScattRayleigh = [rayl[i].œÑ  / combo[i].œÑ for i=1:length(combo)]

        # Create Core Optical Properties merged with trace gas absorptions:
        push!(band_layer_props,combo .+ [CoreAbsorptionOpticalProperties(œÑ_abs[iB][:,i]) for i=1:length(combo)])
        push!(band_fScattRayleigh,fScattRayleigh)
        #aType = array_type(model.params.architecture)
        #combo2 = [CoreScatteringOpticalProperties(aType(combo[i].œÑ),aType(combo[i].œñ), aType(combo[i].Z‚Å∫‚Å∫), aType(combo[i].Z‚Åª‚Å∫)) for i in eachindex(combo)]
        # Need to check how to convert to GPU later as well!
        #return combo,fScattRayleigh
    end
    layer_opt = []
    for iz = 1:nZ
        push!(layer_opt, prod([band_layer_props[i][iz] for i in iBand]));
    end
    # For now just one band_fScattRayleigh
    return layer_opt, band_fScattRayleigh[1]
end

function createAero(œÑAer, aerosol_optics, AerZ‚Å∫‚Å∫, AerZ‚Åª‚Å∫)
    @unpack f·µó, œâÃÉ = aerosol_optics
    œÑ_mod = (1-f·µó * œâÃÉ ) * œÑAer;
    œñ_mod = (1-f·µó) * œâÃÉ/(1-f·µó * œâÃÉ)
    CoreScatteringOpticalProperties(œÑ_mod, œñ_mod,AerZ‚Å∫‚Å∫, AerZ‚Åª‚Å∫)
end

# Extract scattering definitions and integrated absorptions for the source function!
function extractEffectiveProps(
                                lods::Array#{CoreScatteringOpticalProperties{FT},1}
                                ) #where FT

    FT = eltype(lods[1].œÑ)
    nSpec = length(lods[1].œÑ)
    nZ    = length(lods)
    # First the Scattering Interfaces:
    scattering_interface = ScatteringInterface_00()
    scattering_interfaces_all = []
    œÑ_sum_all = zeros(FT,nSpec,nZ+1)
    
    for iz =1:nZ
        # Need to check max entries in Z matrices here as well later!
        scatter = maximum(lods[iz].œÑ .* lods[iz].œñ) > 2eps(FT)
        scattering_interface = get_scattering_interface(scattering_interface, scatter, iz)
        push!(scattering_interfaces_all, scattering_interface)
        œÑ_sum_all[:,iz+1] = œÑ_sum_all[:,iz] + lods[iz].œÑ 
    end
    return scattering_interfaces_all, œÑ_sum_all
end

function expandOpticalProperties(in::CoreScatteringOpticalProperties, arr_type)
    @unpack œÑ, œñ, Z‚Å∫‚Å∫, Z‚Åª‚Å∫ = in 
    @assert length(œÑ) == length(œñ) "œÑ and œñ sizes need to match"
    if size(Z‚Å∫‚Å∫,3) == 1
        Z‚Å∫‚Å∫ = repeat(Z‚Å∫‚Å∫,1,1,length(œÑ))
        Z‚Åª‚Å∫ = repeat(Z‚Åª‚Å∫,1,1,length(œÑ))
        return CoreScatteringOpticalProperties(arr_type(œÑ), arr_type(œñ), arr_type(Z‚Å∫‚Å∫), arr_type(Z‚Åª‚Å∫)) 
    else
        @assert size(Z‚Å∫‚Å∫,3) ==  length(œÑ) "Z and œÑ dimensions need to match "
        CoreScatteringOpticalProperties(arr_type(œÑ), arr_type(œñ), arr_type(Z‚Å∫‚Å∫), arr_type(Z‚Åª‚Å∫)) 
    end
end
