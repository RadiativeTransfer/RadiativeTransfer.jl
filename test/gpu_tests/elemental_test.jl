using KernelAbstractions
using CUDA
# One can write the weights as a matrix (Œº‚±º/(Œº‚±º + Œº‚±º)); needs to be checked!
# qp_matrix = qp_Œº ./ (qp_Œº .+ qp_Œº');

# qp_matrix2 = (1 ./ qp_Œº .+ 1 ./ qp_Œº')
# Random tau:
# œÑ_nSpec = 4 .+ randn(1000, )

# and exp(1/Œº·µ¢ + 1/Œº‚±º)
# mat2   = repeat(qp_matrix2, outer=[1, 1, size(œÑ_nSpec, 1)])
# tau_3d = repeat(œÑ_nSpec, inner=size(qp_matrix, 1), outer=size(qp_matrix, 1))

@kernel function get_r!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w, ndoubl)
    i, j, n = @index(Global, NTuple)
    # @show i, j, n
    r‚Åª‚Å∫[i,j,n] = œñ[n] * Z‚Åª‚Å∫[i,j] * (Œº[j] / (Œº[i] + Œº[j])) * (1 - exp(-dœÑ[n] * ((1 / Œº[i]) + (1 / Œº[j])))) * w[j] 
    if Œº[i] == Œº[j]
        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) = (exp{-œÑ/Œº·µ¢} + œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº·µ¢) Ãá(œÑ/Œº·µ¢) Ãáexp{-œÑ/Œº·µ¢}) Ãáùë§·µ¢
        if i == j
            t‚Å∫‚Å∫[i,j,n] = exp(-dœÑ[n] / Œº[i]) + œñ[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ[n] / Œº[i]) * exp(-dœÑ[n] / Œº[i]) * w[i]
        else
            t‚Å∫‚Å∫[i,j,n] = œñ[n] * Z‚Å∫‚Å∫[i,i] * (dœÑ[n] / Œº[i]) * exp(-dœÑ[n] / Œº[i]) .* w[i]
        end
    else
        # ùêì‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) = œñ Ãáùêô‚Å∫‚Å∫(Œº·µ¢, Œº‚±º) Ãá(Œº‚±º/(Œº·µ¢-Œº‚±º)) Ãá(exp{-œÑ/Œº·µ¢} - exp{-œÑ/Œº‚±º}) Ãáùë§‚±º
        # (ùëñ ‚â† ùëó)
        t‚Å∫‚Å∫[i,j,n] = œñ[n] * Z‚Å∫‚Å∫[i,j] .* (Œº[j] / (Œº[i] - Œº[j])) * (exp(-dœÑ[n] / Œº[i]) - exp.(-dœÑ[n] / Œº[j])) * w[j]
    end
end


n = 40
nSpec = 10000
r‚Åª‚Å∫_CPU, t‚Å∫‚Å∫_CPU = rand(n, n, nSpec), rand(n, n, nSpec);
œñ, dœÑ    = rand(nSpec), rand(nSpec);
Œº, w     = rand(n, n), rand(n, n);
Z‚Åª‚Å∫, Z‚Å∫‚Å∫ = rand(n, n), rand(n, n);

device = KernelAbstractions.CPU()
kernel! = get_r!(device)
kernel!(r‚Åª‚Å∫_CPU, t‚Å∫‚Å∫_CPU, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w,0, ndrange=size(r‚Åª‚Å∫_CPU));

function test2(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)
    event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w, 0, ndrange=size(r‚Åª‚Å∫));
    #wait(device, event)
    synchronize();
end
@time test2(r‚Åª‚Å∫_CPU, t‚Å∫‚Å∫_CPU, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)
@time test2(r‚Åª‚Å∫_CPU, t‚Å∫‚Å∫_CPU, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)

r‚Åª‚Å∫, t‚Å∫‚Å∫ = CuArray(rand(n, n, nSpec)), CuArray(rand(n, n, nSpec));
œñ, dœÑ    = CuArray(rand(nSpec)), CuArray(rand(nSpec));
Œº, w     = CuArray(rand(n, n)), CuArray(rand(n, n));
Z‚Åª‚Å∫, Z‚Å∫‚Å∫ = CuArray(rand(n, n)), CuArray(rand(n, n));

device = KernelAbstractions.CUDADevice()
kernel! = get_r!(device)
kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w,0, ndrange=size(r‚Åª‚Å∫));
function test2(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)
    event = kernel!(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w, 0, ndrange=size(r‚Åª‚Å∫));
    #wait(device, event)
    synchronize();
end
@time test2(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)
@time test2(r‚Åª‚Å∫, t‚Å∫‚Å∫, œñ, dœÑ, Z‚Åª‚Å∫, Z‚Å∫‚Å∫, Œº, w)
