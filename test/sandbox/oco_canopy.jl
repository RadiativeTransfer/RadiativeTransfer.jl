using Revise
using Plots
using Pkg
# Pkg.activate(".")
using vSmartMOM
using vSmartMOM.Architectures
using vSmartMOM.Absorption
using vSmartMOM.Scattering
using vSmartMOM.CoreRT
using vSmartMOM.SolarModel
using InstrumentOperator
using Interpolations
using Polynomials
using ForwardDiff 
using Distributions
using NCDatasets
using Unitful
using CanopyOptics
using TimerOutputs
using Parameters
using LinearAlgebra

## Atmospheric Radiative Transfer

# Load parameters from file
parameters = parameters_from_yaml("test/test_parameters/3BandParameters_canopy.yaml")
#parameters.architecture = CPU()
FT = Float64

# Load OCO Data: 
# File names:
L1File   = "/net/squid/data3/data/FluoData1/group/oco2/L1bSc/oco2_L1bScND_26780a_190715_B10003r_200429212407.h5"
metFile  = "/net/squid/data3/data/FluoData1/group/oco2/L2Met/oco2_L2MetND_26780a_190715_B10003r_200429212406.h5"
dictFile = "/home/cfranken/code/gitHub/InstrumentOperator.jl/json/oco2.yaml"
# Load L1 file (could just use filenames here as well)
oco = InstrumentOperator.load_L1(dictFile,L1File, metFile);


# Pick some bands as tuple (or just one)
bands = (1,2,3);
#bands = (1,3);
# Indices within that band:
indices = (92:885,114:845,50:916);
#indices = (92:885,50:916);
# Geo Index (footprint,sounding):
GeoInd = [5,5000];
oco_sounding = InstrumentOperator.getMeasurement(oco, bands, indices, GeoInd);
# Need to force Rayleigh and Aerosols here:
model = model_from_parameters(parameters);

# Just needed because a single layer Rayleigh is computed as full atmosphere...
for i in eachindex(model.œÑ_rayl)
    model.œÑ_rayl[i] *= 5.0/1013.0
    model.œÑ_aer[i] .= 0
end
i = 3
ŒΩ = parameters.spec_bands[i]
R_SFI_, T_SFI, ieR_SFI, ieT_SFI = CoreRT.rt_run_test(CoreRT.noRS(), model, i)
# Re-interpolate I from ŒΩ_grid to new grid/resolution
Œª_grid = reverse(1e4 ./ parameters.spec_bands[i])
interp_I = LinearInterpolation(Œª_grid, reverse(R_SFI_[1,1,:]));
res = 0.001e-3;
off = 0.5e-3
wl = oco_sounding.ils[i].ŒΩ_out[1]-off:res:oco_sounding.ils[i].ŒΩ_out[end]+off;
@show wl[1],wl[end], Œª_grid[1],Œª_grid[end]
I_wl = interp_I(wl);

# Convolve input spectrum with variable kernel
@time I_conv = InstrumentOperator.conv_spectra(oco_sounding.ils[i], wl, I_wl)
ŒΩ = oco_sounding.SpectralGrid[oco_sounding.BandID[i]]*1e3

plot(ŒΩ, I_conv)

# For testing, O2A band first!!
LD = CanopyOptics.spherical_leaves()
LAI = 4.0
opti = createLeafOpticalStruct((750.0:770.0)*u"nm");
#opti = createLeafOpticalStruct((2050.0:2100.0)*u"nm");
# Default leaf:
leaf = LeafProspectProProperties{Float64}();
T,R = prospect(leaf,opti);
BiLambMod = CanopyOptics.BiLambertianCanopyScattering(R=0.4,T=0.2)
Œº = Array(model.quad_points.qp_Œº)
#ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫ = CanopyOptics.compute_Z_matrices(BiLambMod, Œº, LD, 0)
G1 = 0.5
#contourf(Œº[1:end-1], Œº[1:end-1], ùêô‚Åª‚Å∫[1:end-1,1:end-1], title="Z‚Åª‚Å∫ (Reflection)", xlabel="ŒºÍúú", ylabel="ŒºÍúõ")
T_ = mean(T)
R_ = mean(R)
œñ = T_+R_
#canopyCore = CoreRT.CoreScatteringOpticalProperties(G1*LAI, œñ, ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫)

## Copied and adapted from rt_run
RS_type = CoreRT.noRS() 
iBand = i
@unpack obs_alt, sza, vza, vaz = model.obs_geom   # Observational geometry properties
@unpack qp_Œº, wt_Œº, qp_ŒºN, wt_ŒºN, iŒº‚ÇÄNstart, Œº‚ÇÄ, iŒº‚ÇÄ, Nquad = model.quad_points # All quadrature points
pol_type = model.params.polarization_type
@unpack max_m = model.params
@unpack quad_points = model

# Also to be changed!!
brdf = model.params.brdf[iBand[1]]
@unpack œñ_Cabannes = RS_type


FT = eltype(sza)                    # Get the float-type to use
Nz = length(model.profile.p_full)   # Number of vertical slices
# CFRANKEN NEEDS to be changed for concatenated arrays!!


RS_type.bandSpecLim = [] # (1:œÑ_abs[iB])#zeros(Int64, iBand, 2) #Suniti: how to do this?
#Suniti: make bandSpecLim a part of RS_type (including noRS) so that it can be passed into rt_kernel and elemental/doubling/interaction and postprocessing_vza without major syntax changes
#put this code in model_from_parameters
nSpec = 0;
for iB in iBand
nSpec0 = nSpec+1;
nSpec += size(model.œÑ_abs[iB], 1); # Number of spectral points
push!(RS_type.bandSpecLim,nSpec0:nSpec);                
end

arr_type = array_type(model.params.architecture) # Type of array to use
SFI = true                          # SFI flag
NquadN = Nquad * pol_type.n         # Nquad (multiplied by Stokes n)
dims = (NquadN,NquadN)              # nxn dims

# Need to check this a bit better in the future!
FT_dual = length(model.œÑ_aer[1][1]) > 0 ? typeof(model.œÑ_aer[1][1]) : FT

# Output variables: Reflected and transmitted solar irradiation at TOA and BOA respectively # Might need Dual later!!
#Suniti: consider adding a new dimension (iBand) to these arrays. The assignment of simulated spectra to their specific bands will take place after batch operations, thereby leaving the computational time unaffected 
R       = zeros(FT_dual, length(vza), pol_type.n, nSpec)
T       = zeros(FT_dual, length(vza), pol_type.n, nSpec)
R_SFI   = zeros(FT_dual, length(vza), pol_type.n, nSpec)
T_SFI   = zeros(FT_dual, length(vza), pol_type.n, nSpec)
ieR_SFI = zeros(FT_dual, length(vza), pol_type.n, nSpec)
ieT_SFI = zeros(FT_dual, length(vza), pol_type.n, nSpec)
# Notify user of processing parameters
msg = 
"""
Processing on: $(architecture)
With FT: $(FT)
Source Function Integration: $(SFI)
Dimensions: $((NquadN, NquadN, nSpec))
"""
@info msg

# Create arrays
@timeit "Creating layers" added_layer         = 
CoreRT.make_added_layer(RS_type, FT_dual, arr_type, dims, nSpec)
# Just for now, only use noRS here
@timeit "Creating layers" added_layer_surface = 
CoreRT.make_added_layer(RS_type, FT_dual, arr_type, dims, nSpec)
@timeit "Creating layers" composite_layer     = 
CoreRT.make_composite_layer(RS_type, FT_dual, arr_type, dims, nSpec)
@timeit "Creating arrays" I_static = 
Diagonal(arr_type(Diagonal{FT}(ones(dims[1]))));
#TODO: if RS_type!=noRS, create œñ_Œª‚ÇÅŒª‚ÇÄ, i_Œª‚ÇÅŒª‚ÇÄ, fscattRayl, Z‚Å∫‚Å∫_Œª‚ÇÅŒª‚ÇÄ, Z‚Åª‚Å∫_Œª‚ÇÅŒª‚ÇÄ (for input), and ieJ‚ÇÄ‚Å∫, ieJ‚ÇÄ‚Åª, ieR‚Å∫‚Åª, ieR‚Åª‚Å∫, ieT‚Åª‚Åª, ieT‚Å∫‚Å∫, ier‚Å∫‚Åª, ier‚Åª‚Å∫, iet‚Åª‚Åª, iet‚Å∫‚Å∫ (for output)
#getRamanSSProp(RS_type, Œª, grid_in)

println("Finished initializing arrays")

# Loop over fourier moments
for m = 0:max_m - 1
#m = 0
println("Fourier Moment: ", m, "/", max_m-1)

# Azimuthal weighting
weight = m == 0 ? FT(0.5) : FT(1.0)
# Set the ZŒª·µ¢Œª‚Çí interaction parameters for Raman (or nothing for noRS)
vSmartMOM.InelasticScattering.computeRamanZŒª!(RS_type, pol_type,Array(qp_Œº), m, arr_type)
# Compute the core layer optical properties:
layer_opt_props, fScattRayleigh   = CoreRT.constructCoreOpticalProperties(RS_type,iBand,m,model);

ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫ = CanopyOptics.compute_Z_matrices(BiLambMod, Œº, LD, m)
@show sum(ùêô‚Å∫‚Å∫), sum(layer_opt_props[1].Z‚Å∫‚Å∫)
@show sum(ùêô‚Åª‚Å∫ ), sum(layer_opt_props[1].Z‚Åª‚Å∫)
ùêô‚Åª‚Å∫ /= 2
ùêô‚Å∫‚Å∫ /= 2
canopyCore = CoreRT.CoreScatteringOpticalProperties(G1*LAI, œñ, ùêô‚Å∫‚Å∫, ùêô‚Åª‚Å∫)
# Add Canopy here:
layer_opt_props[1] += canopyCore
# Determine the scattering interface definitions:
scattering_interfaces_all, œÑ_sum_all = CoreRT.extractEffectiveProps(layer_opt_props);

# Loop over vertical layers: 
iz = 1  # Count from TOA to BOA

# Construct the atmospheric layer
# From Rayleigh and aerosol œÑ, œñ, compute overall layer œÑ, œñ
# Suniti: modified to return fscattRayl as the last element of  computed_atmosphere_properties
if !(typeof(RS_type) <: CoreRT.noRS)
RS_type.fscattRayl = fScattRayleigh[iz]
end

# Expand all layer optical properties to their full dimension:
layer_opt = CoreRT.expandOpticalProperties(layer_opt_props[iz], arr_type)

# Perform Core RT (doubling/elemental/interaction)
CoreRT.rt_kernel!(RS_type, pol_type, SFI, 
        #bandSpecLim, 
        added_layer, composite_layer, 
        layer_opt,
        scattering_interfaces_all[iz], 
        œÑ_sum_all[:,iz], 
        m, quad_points, 
        I_static, 
        model.params.architecture, 
        qp_ŒºN, iz) 
#end 

# Create surface matrices:
CoreRT.create_surface_layer!(brdf, 
            added_layer_surface, 
            SFI, m, 
            pol_type, 
            quad_points, 
            arr_type(œÑ_sum_all[:,end]), 
            model.params.architecture);

# One last interaction with surface:
@timeit "interaction" CoreRT.interaction!(RS_type,
                    #bandSpecLim,
                    scattering_interfaces_all[end], 
                    SFI, 
                    composite_layer, 
                    added_layer_surface, 
                    I_static)

# Postprocess and weight according to vza
CoreRT.postprocessing_vza!(RS_type, 
            iŒº‚ÇÄ, pol_type, 
            composite_layer, 
            vza, qp_Œº, m, vaz, Œº‚ÇÄ, 
            weight, nSpec, 
            SFI, 
            R, R_SFI, 
            T, T_SFI, 
            ieR_SFI, ieT_SFI)
end

# Show timing statistics
print_timer()
reset_timer!()
 